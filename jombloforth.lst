%line 1+1 jombloforth.asm













































%line 3+1 unistd_64.inc

%line 330+1 unistd_64.inc

%line 47+1 jombloforth.asm


%line 51+1 jombloforth.asm













%line 68+1 jombloforth.asm



%line 75+1 jombloforth.asm

%line 80+1 jombloforth.asm


[section .text]
DOCOL:
 lea rbp, [rbp-8]
%line 84+0 jombloforth.asm
 mov [rbp], rsi
%line 85+1 jombloforth.asm
 add rax, 8
 mov rsi, rax
 lodsq
%line 87+0 jombloforth.asm
 jmp [rax]
%line 88+1 jombloforth.asm


[global _start]
_start:
 cld

 mov [var_S0], rsp
 mov rbp, return_stack_top
 call set_up_data_segment
 mov rsi, cold_start
 lodsq
%line 98+0 jombloforth.asm
 jmp [rax]
%line 99+1 jombloforth.asm

[section .rodata]
cold_start:
 dq QUIT


%line 108+1 jombloforth.asm









%line 139+1 jombloforth.asm






%line 172+1 jombloforth.asm


%line 173+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_DROP]
 name_DROP:
 dq 0
 db 4 + 0
 db "DROP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $DROP]
 $DROP:
 dq code_DROP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_DROP]
 code_DROP:
%line 174+1 jombloforth.asm
 pop rax
 lodsq
%line 175+0 jombloforth.asm
 jmp [rax]
%line 176+1 jombloforth.asm


%line 177+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SWAP]
 name_SWAP:
 dq name_DROP
 db 4 + 0
 db "SWAP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SWAP]
 $SWAP:
 dq code_SWAP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SWAP]
 code_SWAP:
%line 178+1 jombloforth.asm
 pop rax
 pop rbx
 push rax
 push rbx
 lodsq
%line 182+0 jombloforth.asm
 jmp [rax]
%line 183+1 jombloforth.asm


%line 184+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_DUP]
 name_DUP:
 dq name_SWAP
 db 3 + 0
 db "DUP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $DUP]
 $DUP:
 dq code_DUP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_DUP]
 code_DUP:
%line 185+1 jombloforth.asm
 mov rax, [rsp]
 push rax
 lodsq
%line 187+0 jombloforth.asm
 jmp [rax]
%line 188+1 jombloforth.asm


%line 189+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_OVER]
 name_OVER:
 dq name_DUP
 db 4 + 0
 db "OVER"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $OVER]
 $OVER:
 dq code_OVER


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_OVER]
 code_OVER:
%line 190+1 jombloforth.asm
 mov rax, [rsp+8]
 push rax
 lodsq
%line 192+0 jombloforth.asm
 jmp [rax]
%line 193+1 jombloforth.asm


%line 194+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ROT]
 name_ROT:
 dq name_OVER
 db 3 + 0
 db "ROT"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ROT]
 $ROT:
 dq code_ROT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ROT]
 code_ROT:
%line 195+1 jombloforth.asm
 pop rax
 pop rbx
 pop rcx
 push rbx
 push rax
 push rcx
 lodsq
%line 201+0 jombloforth.asm
 jmp [rax]
%line 202+1 jombloforth.asm


%line 203+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_NROT]
 name_NROT:
 dq name_ROT
 db 4 + 0
 db "-ROT"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $NROT]
 $NROT:
 dq code_NROT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_NROT]
 code_NROT:
%line 204+1 jombloforth.asm
 pop rax
 pop rbx
 pop rcx
 push rax
 push rcx
 push rbx
 lodsq
%line 210+0 jombloforth.asm
 jmp [rax]
%line 211+1 jombloforth.asm


%line 212+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TWODROP]
 name_TWODROP:
 dq name_NROT
 db 5 + 0
 db "2DROP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $TWODROP]
 $TWODROP:
 dq code_TWODROP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_TWODROP]
 code_TWODROP:
%line 213+1 jombloforth.asm
 pop rax
 pop rax
 lodsq
%line 215+0 jombloforth.asm
 jmp [rax]
%line 216+1 jombloforth.asm


%line 217+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TWODUP]
 name_TWODUP:
 dq name_TWODROP
 db 4 + 0
 db "2DUP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $TWODUP]
 $TWODUP:
 dq code_TWODUP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_TWODUP]
 code_TWODUP:
%line 218+1 jombloforth.asm
 mov rax, [rsp]
 mov rbx, [rsp+8]
 push rbx
 push rax
 lodsq
%line 222+0 jombloforth.asm
 jmp [rax]
%line 223+1 jombloforth.asm


%line 224+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TWOSWAP]
 name_TWOSWAP:
 dq name_TWODUP
 db 5 + 0
 db "2SWAP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $TWOSWAP]
 $TWOSWAP:
 dq code_TWOSWAP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_TWOSWAP]
 code_TWOSWAP:
%line 225+1 jombloforth.asm
 pop rax
 pop rbx
 pop rcx
 pop rdx
 push rbx
 push rax
 push rdx
 push rcx
 lodsq
%line 233+0 jombloforth.asm
 jmp [rax]
%line 234+1 jombloforth.asm


%line 235+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_QDUP]
 name_QDUP:
 dq name_TWOSWAP
 db 4 + 0
 db "?DUP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $QDUP]
 $QDUP:
 dq code_QDUP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_QDUP]
 code_QDUP:
%line 236+1 jombloforth.asm
 mov rax, [rsp]
 test rax, rax
 jz .next
 push rax
.next :
%line 240+0 jombloforth.asm
 lodsq
 jmp [rax]
%line 241+1 jombloforth.asm


%line 242+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_INCR]
 name_INCR:
 dq name_QDUP
 db 2 + 0
 db "1+"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $INCR]
 $INCR:
 dq code_INCR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_INCR]
 code_INCR:
%line 243+1 jombloforth.asm
 inc qword [rsp]
 lodsq
%line 244+0 jombloforth.asm
 jmp [rax]
%line 245+1 jombloforth.asm


%line 246+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_DECR]
 name_DECR:
 dq name_INCR
 db 2 + 0
 db "1-"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $DECR]
 $DECR:
 dq code_DECR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_DECR]
 code_DECR:
%line 247+1 jombloforth.asm
 dec qword [rsp]
 lodsq
%line 248+0 jombloforth.asm
 jmp [rax]
%line 249+1 jombloforth.asm


%line 250+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_INCR8]
 name_INCR8:
 dq name_DECR
 db 2 + 0
 db "8+"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $INCR8]
 $INCR8:
 dq code_INCR8


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_INCR8]
 code_INCR8:
%line 251+1 jombloforth.asm
 add qword [rsp], 8
 lodsq
%line 252+0 jombloforth.asm
 jmp [rax]
%line 253+1 jombloforth.asm


%line 254+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_DECR8]
 name_DECR8:
 dq name_INCR8
 db 2 + 0
 db "8-"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $DECR8]
 $DECR8:
 dq code_DECR8


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_DECR8]
 code_DECR8:
%line 255+1 jombloforth.asm
 sub qword [rsp], 8
 lodsq
%line 256+0 jombloforth.asm
 jmp [rax]
%line 257+1 jombloforth.asm


%line 258+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ADD]
 name_ADD:
 dq name_DECR8
 db 1 + 0
 db "+"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ADD]
 $ADD:
 dq code_ADD


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ADD]
 code_ADD:
%line 259+1 jombloforth.asm
 pop rax
 add [rsp], rax
 lodsq
%line 261+0 jombloforth.asm
 jmp [rax]
%line 262+1 jombloforth.asm


%line 263+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SUB]
 name_SUB:
 dq name_ADD
 db 1 + 0
 db "-"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SUB]
 $SUB:
 dq code_SUB


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SUB]
 code_SUB:
%line 264+1 jombloforth.asm
 pop rax
 sub [rsp], rax
 lodsq
%line 266+0 jombloforth.asm
 jmp [rax]
%line 267+1 jombloforth.asm


%line 268+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_MUL]
 name_MUL:
 dq name_SUB
 db 1 + 0
 db "*"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $MUL]
 $MUL:
 dq code_MUL


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_MUL]
 code_MUL:
%line 269+1 jombloforth.asm
 pop rax
 pop rbx
 imul rax, rbx
 push rax
 lodsq
%line 273+0 jombloforth.asm
 jmp [rax]
%line 274+1 jombloforth.asm


%line 275+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_DIVMOD]
 name_DIVMOD:
 dq name_MUL
 db 4 + 0
 db "/MOD"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $DIVMOD]
 $DIVMOD:
 dq code_DIVMOD


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_DIVMOD]
 code_DIVMOD:
%line 276+1 jombloforth.asm
 xor rdx, rdx
 pop rbx
 pop rax
 idiv rbx
 push rdx
 push rax
 lodsq
%line 282+0 jombloforth.asm
 jmp [rax]
%line 283+1 jombloforth.asm



%line 296+1 jombloforth.asm


%line 297+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_EQU]
 name_EQU:
 dq name_DIVMOD
 db 1 + 0
 db "="




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $EQU]
 $EQU:
 dq code_EQU


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_EQU]
 code_EQU:
 pop rax
 pop rbx
 cmp rbx, rax
 setne al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 298+1 jombloforth.asm

%line 298+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_NEQ]
 name_NEQ:
 dq name_EQU
 db 2 + 0
 db "<>"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $NEQ]
 $NEQ:
 dq code_NEQ


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_NEQ]
 code_NEQ:
 pop rax
 pop rbx
 cmp rbx, rax
 sete al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 299+1 jombloforth.asm

%line 299+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_LT]
 name_LT:
 dq name_NEQ
 db 1 + 0
 db "<"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $LT]
 $LT:
 dq code_LT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_LT]
 code_LT:
 pop rax
 pop rbx
 cmp rbx, rax
 setnl al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 300+1 jombloforth.asm

%line 300+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_GT]
 name_GT:
 dq name_LT
 db 1 + 0
 db ">"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $GT]
 $GT:
 dq code_GT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_GT]
 code_GT:
 pop rax
 pop rbx
 cmp rbx, rax
 setng al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 301+1 jombloforth.asm

%line 301+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_LE]
 name_LE:
 dq name_GT
 db 2 + 0
 db "<="




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $LE]
 $LE:
 dq code_LE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_LE]
 code_LE:
 pop rax
 pop rbx
 cmp rbx, rax
 setnle al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 302+1 jombloforth.asm

%line 302+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_GE]
 name_GE:
 dq name_LE
 db 2 + 0
 db ">="




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $GE]
 $GE:
 dq code_GE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_GE]
 code_GE:
 pop rax
 pop rbx
 cmp rbx, rax
 setnge al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 303+1 jombloforth.asm

%line 313+1 jombloforth.asm


%line 314+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ZEQU]
 name_ZEQU:
 dq name_GE
 db 2 + 0
 db "0="




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ZEQU]
 $ZEQU:
 dq code_ZEQU


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ZEQU]
 code_ZEQU:
 pop rax
 test rax, rax
 setnz al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 315+1 jombloforth.asm

%line 315+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ZNEQU]
 name_ZNEQU:
 dq name_ZEQU
 db 3 + 0
 db "0<>"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ZNEQU]
 $ZNEQU:
 dq code_ZNEQU


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ZNEQU]
 code_ZNEQU:
 pop rax
 test rax, rax
 setz al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 316+1 jombloforth.asm

%line 316+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ZLT]
 name_ZLT:
 dq name_ZNEQU
 db 2 + 0
 db "0<"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ZLT]
 $ZLT:
 dq code_ZLT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ZLT]
 code_ZLT:
 pop rax
 test rax, rax
 setnl al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 317+1 jombloforth.asm

%line 317+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ZGT]
 name_ZGT:
 dq name_ZLT
 db 2 + 0
 db "0>"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ZGT]
 $ZGT:
 dq code_ZGT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ZGT]
 code_ZGT:
 pop rax
 test rax, rax
 setng al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 318+1 jombloforth.asm

%line 318+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ZLE]
 name_ZLE:
 dq name_ZGT
 db 3 + 0
 db "0<="




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ZLE]
 $ZLE:
 dq code_ZLE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ZLE]
 code_ZLE:
 pop rax
 test rax, rax
 setnle al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 319+1 jombloforth.asm

%line 319+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ZGE]
 name_ZGE:
 dq name_ZLE
 db 3 + 0
 db "0>="




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ZGE]
 $ZGE:
 dq code_ZGE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ZGE]
 code_ZGE:
 pop rax
 test rax, rax
 setnge al
 movzx rax, al
 push rax
 lodsq
 jmp [rax]
%line 320+1 jombloforth.asm


%line 321+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_AND]
 name_AND:
 dq name_ZGE
 db 3 + 0
 db "AND"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $AND]
 $AND:
 dq code_AND


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_AND]
 code_AND:
%line 322+1 jombloforth.asm
 pop rax
 and [rsp], rax
 lodsq
%line 324+0 jombloforth.asm
 jmp [rax]
%line 325+1 jombloforth.asm


%line 326+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_OR]
 name_OR:
 dq name_AND
 db 2 + 0
 db "OR"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $OR]
 $OR:
 dq code_OR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_OR]
 code_OR:
%line 327+1 jombloforth.asm
 pop rax
 or [rsp], rax
 lodsq
%line 329+0 jombloforth.asm
 jmp [rax]
%line 330+1 jombloforth.asm


%line 331+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_XOR]
 name_XOR:
 dq name_OR
 db 3 + 0
 db "XOR"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $XOR]
 $XOR:
 dq code_XOR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_XOR]
 code_XOR:
%line 332+1 jombloforth.asm
 pop rax
 xor [rsp], rax
 lodsq
%line 334+0 jombloforth.asm
 jmp [rax]
%line 335+1 jombloforth.asm


%line 336+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_INVERT]
 name_INVERT:
 dq name_XOR
 db 6 + 0
 db "INVERT"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $INVERT]
 $INVERT:
 dq code_INVERT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_INVERT]
 code_INVERT:
%line 337+1 jombloforth.asm
 not qword [rsp]
 lodsq
%line 338+0 jombloforth.asm
 jmp [rax]
%line 339+1 jombloforth.asm




%line 342+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_EXIT]
 name_EXIT:
 dq name_INVERT
 db 4 + 0
 db "EXIT"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $EXIT]
 $EXIT:
 dq code_EXIT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_EXIT]
 code_EXIT:
%line 343+1 jombloforth.asm
 mov rsi, [rbp]
%line 343+0 jombloforth.asm
 lea rbp, [rbp+8]
%line 344+1 jombloforth.asm
 lodsq
%line 344+0 jombloforth.asm
 jmp [rax]
%line 345+1 jombloforth.asm




%line 348+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_LIT]
 name_LIT:
 dq name_EXIT
 db 3 + 0
 db "LIT"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $LIT]
 $LIT:
 dq code_LIT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_LIT]
 code_LIT:
%line 349+1 jombloforth.asm
 lodsq
 push rax
 lodsq
%line 351+0 jombloforth.asm
 jmp [rax]
%line 352+1 jombloforth.asm




%line 355+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_STORE]
 name_STORE:
 dq name_LIT
 db 1 + 0
 db "!"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $STORE]
 $STORE:
 dq code_STORE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_STORE]
 code_STORE:
%line 356+1 jombloforth.asm
 pop rbx
 pop rax
 mov [rbx], rax
 lodsq
%line 359+0 jombloforth.asm
 jmp [rax]
%line 360+1 jombloforth.asm


%line 361+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_FETCH]
 name_FETCH:
 dq name_STORE
 db 1 + 0
 db "@"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $FETCH]
 $FETCH:
 dq code_FETCH


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_FETCH]
 code_FETCH:
%line 362+1 jombloforth.asm
 pop rbx
 mov rax, [rbx]
 push rax
 lodsq
%line 365+0 jombloforth.asm
 jmp [rax]
%line 366+1 jombloforth.asm


%line 367+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ADDSTORE]
 name_ADDSTORE:
 dq name_FETCH
 db 2 + 0
 db "+!"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ADDSTORE]
 $ADDSTORE:
 dq code_ADDSTORE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ADDSTORE]
 code_ADDSTORE:
%line 368+1 jombloforth.asm
 pop rbx
 pop rax
 add [rbx], rax
 lodsq
%line 371+0 jombloforth.asm
 jmp [rax]
%line 372+1 jombloforth.asm


%line 373+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SUBSTORE]
 name_SUBSTORE:
 dq name_ADDSTORE
 db 2 + 0
 db "-!"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SUBSTORE]
 $SUBSTORE:
 dq code_SUBSTORE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SUBSTORE]
 code_SUBSTORE:
%line 374+1 jombloforth.asm
 pop rbx
 pop rax
 sub [rbx], rax
 lodsq
%line 377+0 jombloforth.asm
 jmp [rax]
%line 378+1 jombloforth.asm


%line 379+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_STOREBYTE]
 name_STOREBYTE:
 dq name_SUBSTORE
 db 2 + 0
 db "C!"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $STOREBYTE]
 $STOREBYTE:
 dq code_STOREBYTE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_STOREBYTE]
 code_STOREBYTE:
%line 380+1 jombloforth.asm
 pop rbx
 pop rax
 mov [rbx], al
 lodsq
%line 383+0 jombloforth.asm
 jmp [rax]
%line 384+1 jombloforth.asm


%line 385+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_FETCHBYTE]
 name_FETCHBYTE:
 dq name_STOREBYTE
 db 2 + 0
 db "C@"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $FETCHBYTE]
 $FETCHBYTE:
 dq code_FETCHBYTE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_FETCHBYTE]
 code_FETCHBYTE:
%line 386+1 jombloforth.asm
 pop rbx
 xor rax, rax
 mov al, [rbx]
 lodsq
%line 389+0 jombloforth.asm
 jmp [rax]
%line 390+1 jombloforth.asm


%line 391+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_CCOPY]
 name_CCOPY:
 dq name_FETCHBYTE
 db 4 + 0
 db "C@C!"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $CCOPY]
 $CCOPY:
 dq code_CCOPY


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_CCOPY]
 code_CCOPY:
%line 392+1 jombloforth.asm
 mov rbx, [rsp+8]
 mov al, [rbx]
 pop rdi
 stosb
 push rdi
 inc qword [rsp+8]
 lodsq
%line 398+0 jombloforth.asm
 jmp [rax]
%line 399+1 jombloforth.asm


%line 400+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_CMOVE]
 name_CMOVE:
 dq name_CCOPY
 db 5 + 0
 db "CMOVE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $CMOVE]
 $CMOVE:
 dq code_CMOVE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_CMOVE]
 code_CMOVE:
%line 401+1 jombloforth.asm
 mov rdx, rsi
 pop rcx
 pop rdi
 pop rsi
 rep movsb
 mov rsi, rdx
 lodsq
%line 407+0 jombloforth.asm
 jmp [rax]
%line 408+1 jombloforth.asm



%line 422+1 jombloforth.asm


%line 423+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_STATE]
 name_STATE:
 dq name_CMOVE
 db 5 + 0
 db "STATE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $STATE]
 $STATE:
 dq code_STATE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_STATE]
 code_STATE:
 push var_STATE
 lodsq
 jmp [rax]


[section .data]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
 var_STATE:
 dq 0
%line 424+1 jombloforth.asm

%line 424+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_HERE]
 name_HERE:
 dq name_STATE
 db 4 + 0
 db "HERE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $HERE]
 $HERE:
 dq code_HERE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_HERE]
 code_HERE:
 push var_HERE
 lodsq
 jmp [rax]


[section .data]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
 var_HERE:
 dq 0
%line 425+1 jombloforth.asm

%line 425+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_LATEST]
 name_LATEST:
 dq name_HERE
 db 6 + 0
 db "LATEST"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $LATEST]
 $LATEST:
 dq code_LATEST


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_LATEST]
 code_LATEST:
 push var_LATEST
 lodsq
 jmp [rax]


[section .data]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
 var_LATEST:
 dq name_SYSCALL0
%line 426+1 jombloforth.asm

%line 426+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_S0]
 name_S0:
 dq name_LATEST
 db 2 + 0
 db "S0"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $S0]
 $S0:
 dq code_S0


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_S0]
 code_S0:
 push var_S0
 lodsq
 jmp [rax]


[section .data]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
 var_S0:
 dq 0
%line 427+1 jombloforth.asm

%line 427+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_BASE]
 name_BASE:
 dq name_S0
 db 4 + 0
 db "BASE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $BASE]
 $BASE:
 dq code_BASE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_BASE]
 code_BASE:
 push var_BASE
 lodsq
 jmp [rax]


[section .data]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
 var_BASE:
 dq 10
%line 428+1 jombloforth.asm

%line 434+1 jombloforth.asm


%line 435+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_VERSION]
 name_VERSION:
 dq name_BASE
 db 7 + 0
 db "VERSION"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $VERSION]
 $VERSION:
 dq code_VERSION


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_VERSION]
 code_VERSION:
 push 1
 lodsq
 jmp [rax]
%line 436+1 jombloforth.asm

%line 436+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_R0]
 name_R0:
 dq name_VERSION
 db 2 + 0
 db "R0"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $R0]
 $R0:
 dq code_R0


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_R0]
 code_R0:
 push return_stack_top
 lodsq
 jmp [rax]
%line 437+1 jombloforth.asm

%line 437+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___DOCOL]
 name___DOCOL:
 dq name_R0
 db 5 + 0
 db "DOCOL"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__DOCOL]
 $__DOCOL:
 dq code___DOCOL


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___DOCOL]
 code___DOCOL:
 push DOCOL
 lodsq
 jmp [rax]
%line 438+1 jombloforth.asm


%line 439+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___F_IMMED]
 name___F_IMMED:
 dq name___DOCOL
 db 7 + 0
 db "F_IMMED"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__F_IMMED]
 $__F_IMMED:
 dq code___F_IMMED


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___F_IMMED]
 code___F_IMMED:
 push 0x80
 lodsq
 jmp [rax]
%line 440+1 jombloforth.asm

%line 440+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___F_HIDDEN]
 name___F_HIDDEN:
 dq name___F_IMMED
 db 8 + 0
 db "F_HIDDEN"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__F_HIDDEN]
 $__F_HIDDEN:
 dq code___F_HIDDEN


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___F_HIDDEN]
 code___F_HIDDEN:
 push 0x20
 lodsq
 jmp [rax]
%line 441+1 jombloforth.asm

%line 441+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___F_LENMASK]
 name___F_LENMASK:
 dq name___F_HIDDEN
 db 9 + 0
 db "F_LENMASK"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__F_LENMASK]
 $__F_LENMASK:
 dq code___F_LENMASK


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___F_LENMASK]
 code___F_LENMASK:
 push 0x1f
 lodsq
 jmp [rax]
%line 442+1 jombloforth.asm

%line 447+1 jombloforth.asm


%line 448+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYS_EXIT]
 name_SYS_EXIT:
 dq name___F_LENMASK
 db 8 + 0
 db 'SYS_EXIT'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYS_EXIT]
 $SYS_EXIT:
 dq code_SYS_EXIT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYS_EXIT]
 code_SYS_EXIT:
 push 60
 lodsq
 jmp [rax]
%line 449+1 jombloforth.asm

%line 449+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYS_OPEN]
 name_SYS_OPEN:
 dq name_SYS_EXIT
 db 8 + 0
 db 'SYS_OPEN'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYS_OPEN]
 $SYS_OPEN:
 dq code_SYS_OPEN


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYS_OPEN]
 code_SYS_OPEN:
 push 2
 lodsq
 jmp [rax]
%line 450+1 jombloforth.asm

%line 450+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYS_CLOSE]
 name_SYS_CLOSE:
 dq name_SYS_OPEN
 db 9 + 0
 db 'SYS_CLOSE'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYS_CLOSE]
 $SYS_CLOSE:
 dq code_SYS_CLOSE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYS_CLOSE]
 code_SYS_CLOSE:
 push 3
 lodsq
 jmp [rax]
%line 451+1 jombloforth.asm

%line 451+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYS_READ]
 name_SYS_READ:
 dq name_SYS_CLOSE
 db 8 + 0
 db 'SYS_READ'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYS_READ]
 $SYS_READ:
 dq code_SYS_READ


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYS_READ]
 code_SYS_READ:
 push 0
 lodsq
 jmp [rax]
%line 452+1 jombloforth.asm

%line 452+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYS_WRITE]
 name_SYS_WRITE:
 dq name_SYS_READ
 db 9 + 0
 db 'SYS_WRITE'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYS_WRITE]
 $SYS_WRITE:
 dq code_SYS_WRITE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYS_WRITE]
 code_SYS_WRITE:
 push 1
 lodsq
 jmp [rax]
%line 453+1 jombloforth.asm

%line 453+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYS_CREAT]
 name_SYS_CREAT:
 dq name_SYS_WRITE
 db 9 + 0
 db 'SYS_CREAT'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYS_CREAT]
 $SYS_CREAT:
 dq code_SYS_CREAT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYS_CREAT]
 code_SYS_CREAT:
 push 85
 lodsq
 jmp [rax]
%line 454+1 jombloforth.asm

%line 454+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYS_BRK]
 name_SYS_BRK:
 dq name_SYS_CREAT
 db 7 + 0
 db 'SYS_BRK'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYS_BRK]
 $SYS_BRK:
 dq code_SYS_BRK


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYS_BRK]
 code_SYS_BRK:
 push 12
 lodsq
 jmp [rax]
%line 455+1 jombloforth.asm

%line 460+1 jombloforth.asm


%line 461+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_RDONLY]
 name___O_RDONLY:
 dq name_SYS_BRK
 db 8 + 0
 db 'O_RDONLY'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_RDONLY]
 $__O_RDONLY:
 dq code___O_RDONLY


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_RDONLY]
 code___O_RDONLY:
 push 0o
 lodsq
 jmp [rax]
%line 462+1 jombloforth.asm

%line 462+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_WRONLY]
 name___O_WRONLY:
 dq name___O_RDONLY
 db 8 + 0
 db 'O_WRONLY'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_WRONLY]
 $__O_WRONLY:
 dq code___O_WRONLY


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_WRONLY]
 code___O_WRONLY:
 push 1o
 lodsq
 jmp [rax]
%line 463+1 jombloforth.asm

%line 463+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_RDWR]
 name___O_RDWR:
 dq name___O_WRONLY
 db 6 + 0
 db 'O_RDWR'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_RDWR]
 $__O_RDWR:
 dq code___O_RDWR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_RDWR]
 code___O_RDWR:
 push 2o
 lodsq
 jmp [rax]
%line 464+1 jombloforth.asm

%line 464+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_CREAT]
 name___O_CREAT:
 dq name___O_RDWR
 db 7 + 0
 db 'O_CREAT'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_CREAT]
 $__O_CREAT:
 dq code___O_CREAT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_CREAT]
 code___O_CREAT:
 push 100o
 lodsq
 jmp [rax]
%line 465+1 jombloforth.asm

%line 465+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_EXCL]
 name___O_EXCL:
 dq name___O_CREAT
 db 6 + 0
 db 'O_EXCL'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_EXCL]
 $__O_EXCL:
 dq code___O_EXCL


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_EXCL]
 code___O_EXCL:
 push 200o
 lodsq
 jmp [rax]
%line 466+1 jombloforth.asm

%line 466+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_TRUNC]
 name___O_TRUNC:
 dq name___O_EXCL
 db 7 + 0
 db 'O_TRUNC'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_TRUNC]
 $__O_TRUNC:
 dq code___O_TRUNC


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_TRUNC]
 code___O_TRUNC:
 push 1000o
 lodsq
 jmp [rax]
%line 467+1 jombloforth.asm

%line 467+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_APPEND]
 name___O_APPEND:
 dq name___O_TRUNC
 db 8 + 0
 db 'O_APPEND'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_APPEND]
 $__O_APPEND:
 dq code___O_APPEND


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_APPEND]
 code___O_APPEND:
 push 2000o
 lodsq
 jmp [rax]
%line 468+1 jombloforth.asm

%line 468+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name___O_NONBLOCK]
 name___O_NONBLOCK:
 dq name___O_APPEND
 db 10 + 0
 db 'O_NONBLOCK'




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $__O_NONBLOCK]
 $__O_NONBLOCK:
 dq code___O_NONBLOCK


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code___O_NONBLOCK]
 code___O_NONBLOCK:
 push 4000o
 lodsq
 jmp [rax]
%line 469+1 jombloforth.asm




%line 472+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TOR]
 name_TOR:
 dq name___O_NONBLOCK
 db 2 + 0
 db ">R"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $TOR]
 $TOR:
 dq code_TOR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_TOR]
 code_TOR:
%line 473+1 jombloforth.asm
 pop rax
 lea rbp, [rbp-8]
%line 474+0 jombloforth.asm
 mov [rbp], rax
%line 475+1 jombloforth.asm
 lodsq
%line 475+0 jombloforth.asm
 jmp [rax]
%line 476+1 jombloforth.asm


%line 477+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_FROMR]
 name_FROMR:
 dq name_TOR
 db 2 + 0
 db "R>"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $FROMR]
 $FROMR:
 dq code_FROMR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_FROMR]
 code_FROMR:
%line 478+1 jombloforth.asm
 mov rax, [rbp]
%line 478+0 jombloforth.asm
 lea rbp, [rbp+8]
%line 479+1 jombloforth.asm
 push rax
 lodsq
%line 480+0 jombloforth.asm
 jmp [rax]
%line 481+1 jombloforth.asm


%line 482+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_RSPFETCH]
 name_RSPFETCH:
 dq name_FROMR
 db 4 + 0
 db "RSP@"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $RSPFETCH]
 $RSPFETCH:
 dq code_RSPFETCH


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_RSPFETCH]
 code_RSPFETCH:
%line 483+1 jombloforth.asm
 push rbp
 lodsq
%line 484+0 jombloforth.asm
 jmp [rax]
%line 485+1 jombloforth.asm


%line 486+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_RSPSTORE]
 name_RSPSTORE:
 dq name_RSPFETCH
 db 4 + 0
 db "RSP!"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $RSPSTORE]
 $RSPSTORE:
 dq code_RSPSTORE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_RSPSTORE]
 code_RSPSTORE:
%line 487+1 jombloforth.asm
 pop rbp
 lodsq
%line 488+0 jombloforth.asm
 jmp [rax]
%line 489+1 jombloforth.asm


%line 490+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_RDROP]
 name_RDROP:
 dq name_RSPSTORE
 db 5 + 0
 db "RDROP"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $RDROP]
 $RDROP:
 dq code_RDROP


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_RDROP]
 code_RDROP:
%line 491+1 jombloforth.asm
 add rbp, 8
 lodsq
%line 492+0 jombloforth.asm
 jmp [rax]
%line 493+1 jombloforth.asm





%line 497+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_DSPFETCH]
 name_DSPFETCH:
 dq name_RDROP
 db 4 + 0
 db "DSP@"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $DSPFETCH]
 $DSPFETCH:
 dq code_DSPFETCH


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_DSPFETCH]
 code_DSPFETCH:
%line 498+1 jombloforth.asm
 mov rax, rsp
 push rax
 lodsq
%line 500+0 jombloforth.asm
 jmp [rax]
%line 501+1 jombloforth.asm


%line 502+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_DSPSTORE]
 name_DSPSTORE:
 dq name_DSPFETCH
 db 4 + 0
 db "DSP!"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $DSPSTORE]
 $DSPSTORE:
 dq code_DSPSTORE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_DSPSTORE]
 code_DSPSTORE:
%line 503+1 jombloforth.asm
 pop rsp
 lodsq
%line 504+0 jombloforth.asm
 jmp [rax]
%line 505+1 jombloforth.asm




%line 508+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_KEY]
 name_KEY:
 dq name_DSPSTORE
 db 3 + 0
 db "KEY"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $KEY]
 $KEY:
 dq code_KEY


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_KEY]
 code_KEY:
%line 509+1 jombloforth.asm
 call _KEY
 push rax
 lodsq
%line 511+0 jombloforth.asm
 jmp [rax]
%line 512+1 jombloforth.asm
_KEY:
 mov rbx, [currkey]
 cmp rbx, [bufftop]
 jge .full
 xor rax, rax
 mov al, [rbx]
 inc rbx
 mov [currkey], rbx
 ret

.full:
 xor rdi, rdi
 push rsi
 mov rsi, buffer
 mov [currkey], rsi
 mov rdx, 4096
 mov rax, 0
 syscall
 test rax, rax
 jbe .eof
 add rsi, rax
 mov [bufftop], rsi
 pop rsi
 jmp _KEY

.eof:
 xor rdi, rdi
 mov rax, 60
 syscall

[section .data]
[sectalign 8]
%line 543+0 jombloforth.asm
times (((8) - (($-$$) % (8))) % (8)) db 0
%line 544+1 jombloforth.asm
currkey:
 dq buffer
bufftop:
 dq buffer


%line 549+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_EMIT]
 name_EMIT:
 dq name_KEY
 db 4 + 0
 db "EMIT"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $EMIT]
 $EMIT:
 dq code_EMIT


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_EMIT]
 code_EMIT:
%line 550+1 jombloforth.asm
 pop rax
 call _EMIT
 lodsq
%line 552+0 jombloforth.asm
 jmp [rax]
%line 553+1 jombloforth.asm
_EMIT:
 mov rdi, 1
 mov [emit_scratch], al
 push rsi
 mov rsi, emit_scratch
 mov rdx, 1
 mov rax, 1
 syscall
 pop rsi
 ret

[section .data]
emit_scratch: db 0


%line 567+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_WORD]
 name_WORD:
 dq name_EMIT
 db 4 + 0
 db "WORD"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $WORD]
 $WORD:
 dq code_WORD


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_WORD]
 code_WORD:
%line 568+1 jombloforth.asm
 call _WORD
 push rdi
 push rcx
 lodsq
%line 571+0 jombloforth.asm
 jmp [rax]
%line 572+1 jombloforth.asm

_WORD:
.ws:
 call _KEY
 cmp al, '\'
 je .comment
 cmp al, ' '
 jbe .ws

 mov rdi, word_buffer
.word:
 stosb
 call _KEY
 cmp al, ' '
 ja .word

 sub rdi, word_buffer
 mov rcx, rdi
 mov rdi, word_buffer
 ret

.comment:
 call _KEY
 cmp al, 0x0A
 jne .comment
 jmp .ws

[section .data]
word_buffer: times 32 db 0


%line 602+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_NUMBER]
 name_NUMBER:
 dq name_WORD
 db 6 + 0
 db "NUMBER"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $NUMBER]
 $NUMBER:
 dq code_NUMBER


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_NUMBER]
 code_NUMBER:
%line 603+1 jombloforth.asm
 pop rcx
 pop rdi
 call _NUMBER
 push rax
 push rcx
 lodsq
%line 608+0 jombloforth.asm
 jmp [rax]
%line 609+1 jombloforth.asm

_NUMBER:
 xor rax, rax
 xor rbx, rbx

 test rcx, rcx
 jz .ret

 mov rdx, [var_BASE]
 mov bl, [rdi]
 inc rdi
 push rax
 cmp bl, '-'
 jnz .convert
 pop rax
 push rbx
 dec rcx
 jnz .loop
 pop rbx
 mov rcx, 1
 ret


.loop:
 imul rax, rdx
 mov bl, [rdi]
 inc rdi

.convert:
 sub bl, '0'
 jb .finish
 cmp bl, 10
 jb .numeric
 sub bl, 17
 jb .finish
 add bl, 10

.numeric:
 cmp bl, dl
 jge .finish


 add rax, rbx
 dec rcx
 jnz .loop


.finish:
 pop rbx
 test rbx, rbx
 jz .ret
 neg rax

.ret:
 ret





%line 668+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_FIND]
 name_FIND:
 dq name_NUMBER
 db 4 + 0
 db "FIND"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $FIND]
 $FIND:
 dq code_FIND


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_FIND]
 code_FIND:
%line 669+1 jombloforth.asm
 pop rcx
 pop rdi
 call _FIND
 push rax
 lodsq
%line 673+0 jombloforth.asm
 jmp [rax]
%line 674+1 jombloforth.asm

_FIND:
 push rsi


 mov rdx, [var_LATEST]
.loop:
 test rdx, rdx
 je .notfound




 xor rax,rax
 mov al, [rdx+8]
 and al, 0x20 | 0x1f
 cmp al, cl
 jne .next


 push rcx
 push rdi
 lea rsi, [rdx+9]
 repe cmpsb
 pop rdi
 pop rcx
 jne .next


 pop rsi
 mov rax, rdx
 ret

.next:
 mov rdx, [rdx]
 jmp .loop

.notfound:
 pop rsi
 xor rax,rax
 ret


%line 716+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TCFA]
 name_TCFA:
 dq name_FIND
 db 4 + 0
 db ">CFA"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $TCFA]
 $TCFA:
 dq code_TCFA


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_TCFA]
 code_TCFA:
%line 717+1 jombloforth.asm
 pop rdi
 call _TCFA
 push rdi
 lodsq
%line 720+0 jombloforth.asm
 jmp [rax]
%line 721+1 jombloforth.asm

_TCFA:
 xor rax, rax
 add rdi, 8
 mov al, [rdi]
 inc rdi
 and al, 0x1f
 add rdi, rax
 add rdi, 0b111
 and rdi, ~0b111
 ret


%line 733+0 jombloforth.asm

[section .rodata]

[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TDFA]
 name_TDFA:
 dq name_TCFA
 db 4 + 0
 db ">DFA"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global TDFA]
 TDFA:
 dq DOCOL
%line 734+1 jombloforth.asm
 dq TCFA
 dq INCR8
 dq EXIT




%line 740+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_CREATE]
 name_CREATE:
 dq name_TDFA
 db 6 + 0
 db "CREATE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $CREATE]
 $CREATE:
 dq code_CREATE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_CREATE]
 code_CREATE:
%line 741+1 jombloforth.asm

 pop rcx
 pop rbx


 mov rdi, [var_HERE]
 mov rax, [var_LATEST]
 stosq


 mov al, cl
 stosb
 push rsi
 mov rsi, rbx
 rep movsb
 pop rsi
 add rdi, 0b111
 and rdi, ~0b111


 mov rax, [var_HERE]
 mov [var_LATEST], rax
 mov [var_HERE], rdi
 lodsq
%line 764+0 jombloforth.asm
 jmp [rax]
%line 765+1 jombloforth.asm


%line 766+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_COMMA]
 name_COMMA:
 dq name_CREATE
 db 1 + 0
 db ","




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $COMMA]
 $COMMA:
 dq code_COMMA


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_COMMA]
 code_COMMA:
%line 767+1 jombloforth.asm
 pop rax
 call _COMMA
 lodsq
%line 769+0 jombloforth.asm
 jmp [rax]
%line 770+1 jombloforth.asm

_COMMA:
 mov rdi, [var_HERE]
 stosq
 mov [var_HERE], rdi
 ret


%line 777+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_LBRAC]
 name_LBRAC:
 dq name_COMMA
 db 1 + 0x80
 db "["




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $LBRAC]
 $LBRAC:
 dq code_LBRAC


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_LBRAC]
 code_LBRAC:
%line 778+1 jombloforth.asm
 xor rax, rax
 mov [var_STATE], rax
 lodsq
%line 780+0 jombloforth.asm
 jmp [rax]
%line 781+1 jombloforth.asm


%line 782+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_RBRAC]
 name_RBRAC:
 dq name_LBRAC
 db 1 + 0
 db "]"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $RBRAC]
 $RBRAC:
 dq code_RBRAC


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_RBRAC]
 code_RBRAC:
%line 783+1 jombloforth.asm
 mov qword [var_STATE], 1
 lodsq
%line 784+0 jombloforth.asm
 jmp [rax]
%line 785+1 jombloforth.asm


%line 786+0 jombloforth.asm

[section .rodata]

[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_COLON]
 name_COLON:
 dq name_RBRAC
 db 1 + 0
 db ":"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global COLON]
 COLON:
 dq DOCOL
%line 787+1 jombloforth.asm
 dq $WORD
 dq CREATE
 dq LIT, DOCOL, COMMA
 dq LATEST, FETCH, HIDDEN
 dq RBRAC
 dq EXIT


%line 794+0 jombloforth.asm

[section .rodata]

[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SEMICOLON]
 name_SEMICOLON:
 dq name_COLON
 db 1 + 0x80
 db ";"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global SEMICOLON]
 SEMICOLON:
 dq DOCOL
%line 795+1 jombloforth.asm
 dq LIT, EXIT, COMMA
 dq LATEST, FETCH, HIDDEN
 dq LBRAC
 dq EXIT



%line 801+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_IMMEDATE]
 name_IMMEDATE:
 dq name_SEMICOLON
 db 9 + 0x80
 db "IMMEDIATE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $IMMEDATE]
 $IMMEDATE:
 dq code_IMMEDATE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_IMMEDATE]
 code_IMMEDATE:
%line 802+1 jombloforth.asm
 mov rdi, [var_LATEST]
 add rdi, 8
 xor byte [rdi], 0x80
 lodsq
%line 805+0 jombloforth.asm
 jmp [rax]
%line 806+1 jombloforth.asm


%line 807+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_HIDDEN]
 name_HIDDEN:
 dq name_IMMEDATE
 db 6 + 0
 db "HIDDEN"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $HIDDEN]
 $HIDDEN:
 dq code_HIDDEN


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_HIDDEN]
 code_HIDDEN:
%line 808+1 jombloforth.asm
 pop rdi
 add rdi, 8
 xor byte [rdi], 0x20
 lodsq
%line 811+0 jombloforth.asm
 jmp [rax]
%line 812+1 jombloforth.asm


%line 813+0 jombloforth.asm

[section .rodata]

[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_HIDE]
 name_HIDE:
 dq name_HIDDEN
 db 4 + 0
 db "HIDE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global HIDE]
 HIDE:
 dq DOCOL
%line 814+1 jombloforth.asm
 dq $WORD
 dq FIND
 dq HIDDEN
 dq EXIT


%line 819+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TICK]
 name_TICK:
 dq name_HIDE
 db 1 + 0
 db "'"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $TICK]
 $TICK:
 dq code_TICK


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_TICK]
 code_TICK:
%line 820+1 jombloforth.asm
 lodsq
 push rax
 lodsq
%line 822+0 jombloforth.asm
 jmp [rax]
%line 823+1 jombloforth.asm




%line 826+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_BRANCH]
 name_BRANCH:
 dq name_TICK
 db 6 + 0
 db "BRANCH"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $BRANCH]
 $BRANCH:
 dq code_BRANCH


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_BRANCH]
 code_BRANCH:
%line 827+1 jombloforth.asm
 add rsi, [rsi]
 lodsq
%line 828+0 jombloforth.asm
 jmp [rax]
%line 829+1 jombloforth.asm


%line 830+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_ZBRANCH]
 name_ZBRANCH:
 dq name_BRANCH
 db 7 + 0
 db "0BRANCH"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $ZBRANCH]
 $ZBRANCH:
 dq code_ZBRANCH


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_ZBRANCH]
 code_ZBRANCH:
%line 831+1 jombloforth.asm
 pop rax
 test rax, rax
 jz code_BRANCH
 lodsq
 lodsq
%line 835+0 jombloforth.asm
 jmp [rax]
%line 836+1 jombloforth.asm




%line 839+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_LITSTRING]
 name_LITSTRING:
 dq name_ZBRANCH
 db 9 + 0
 db "LITSTRING"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $LITSTRING]
 $LITSTRING:
 dq code_LITSTRING


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_LITSTRING]
 code_LITSTRING:
%line 840+1 jombloforth.asm
 lodsq
 push rsi
 push rax
 add rsi, rax
 add rsi, 0b111
 and rsi, ~0b111
 lodsq
%line 846+0 jombloforth.asm
 jmp [rax]
%line 847+1 jombloforth.asm


%line 848+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_TELL]
 name_TELL:
 dq name_LITSTRING
 db 4 + 0
 db "TELL"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $TELL]
 $TELL:
 dq code_TELL


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_TELL]
 code_TELL:
%line 849+1 jombloforth.asm
 mov rcx, rsi
 mov rdi, 1
 pop rdx
 pop rsi
 mov rax, 1
 push rcx
 syscall
 pop rsi
 lodsq
%line 857+0 jombloforth.asm
 jmp [rax]
%line 858+1 jombloforth.asm




%line 861+0 jombloforth.asm

[section .rodata]

[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_FORTYTWO]
 name_FORTYTWO:
 dq name_TELL
 db 8 + 0
 db "FORTYTWO"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global FORTYTWO]
 FORTYTWO:
 dq DOCOL
%line 862+1 jombloforth.asm
 dq DOCOL
 dq LIT
 dq 42
 dq EXIT




%line 869+0 jombloforth.asm

[section .rodata]

[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_QUIT]
 name_QUIT:
 dq name_FORTYTWO
 db 4 + 0
 db "QUIT"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global QUIT]
 QUIT:
 dq DOCOL
%line 870+1 jombloforth.asm
 dq R0, RSPSTORE
 dq INTERPRET
 dq BRANCH, -16


%line 874+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_INTERPRET]
 name_INTERPRET:
 dq name_QUIT
 db 9 + 0
 db "INTERPRET"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $INTERPRET]
 $INTERPRET:
 dq code_INTERPRET


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_INTERPRET]
 code_INTERPRET:
%line 875+1 jombloforth.asm
 call _WORD


 xor rax, rax
 mov [interpret_is_lit], rax
 call _FIND
 test rax, rax
 jz .number


 mov rdi, rax
 mov al, [rdi+8]
 push ax
 call _TCFA
 pop ax
 and al, 0x80
 mov rax, rdi
 jnz .exec

 jmp .main


.number:
 inc qword [interpret_is_lit]
 call _NUMBER
 test rcx, rcx
 jnz .numerror
 mov rbx, rax
 mov rax, LIT


.main:
 mov rdx, [var_STATE]
 test rdx, rdx
 jz .exec


 call _COMMA
 mov rcx, [interpret_is_lit]
 test rcx, rcx
 jz .next
 mov rax, rbx
 call _COMMA
.next:
 lodsq
%line 919+0 jombloforth.asm
 jmp [rax]
%line 920+1 jombloforth.asm


.exec:
 mov rcx, [interpret_is_lit]
 test rcx, rcx
 jnz .litexec



 jmp [rax]


.litexec:
 push rbx
 lodsq
%line 934+0 jombloforth.asm
 jmp [rax]
%line 935+1 jombloforth.asm


.numerror:

 push rsi

 mov rdi, 2
 mov rsi, errmsg
 mov rdx, errmsglen
 mov rax, 1
 syscall

 mov rsi, [currkey]
 mov rdx, rsi
 sub rdx, buffer
 cmp rdx, 40
 jle .le
 mov rdx, 40
.le:
 sub rsi, rdx
 mov rax, 1
 syscall

 mov rsi, errmsgnl
 mov rdx, 1
 mov rax, 1
 syscall
 pop rsi

 lodsq
%line 964+0 jombloforth.asm
 jmp [rax]
%line 965+1 jombloforth.asm

[section .rodata]
errmsg: db "PARSE ERROR: "
errmsglen: equ $ - errmsg
errmsgnl: db 0x0A

[section .data]
[sectalign 8]
%line 972+0 jombloforth.asm
times (((8) - (($-$$) % (8))) % (8)) nop
%line 973+1 jombloforth.asm
interpret_is_lit:
 dq 0




%line 978+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_CHAR]
 name_CHAR:
 dq name_INTERPRET
 db 4 + 0
 db "CHAR"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $CHAR]
 $CHAR:
 dq code_CHAR


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_CHAR]
 code_CHAR:
%line 979+1 jombloforth.asm
 call _WORD
 xor rax, rax
 mov al, [rdi]
 push rax
 lodsq
%line 983+0 jombloforth.asm
 jmp [rax]
%line 984+1 jombloforth.asm


%line 985+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_EXECUTE]
 name_EXECUTE:
 dq name_CHAR
 db 7 + 0
 db "EXECUTE"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $EXECUTE]
 $EXECUTE:
 dq code_EXECUTE


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_EXECUTE]
 code_EXECUTE:
%line 986+1 jombloforth.asm
 pop rax
 jmp [rax]



%line 990+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYSCALL3]
 name_SYSCALL3:
 dq name_EXECUTE
 db 8 + 0
 db "SYSCALL3"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYSCALL3]
 $SYSCALL3:
 dq code_SYSCALL3


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYSCALL3]
 code_SYSCALL3:
%line 991+1 jombloforth.asm
 mov rcx, rsi
 pop rax
 pop rdi
 pop rsi
 pop rdx
 push rcx
 syscall
 pop rsi
 push rax
 lodsq
%line 1000+0 jombloforth.asm
 jmp [rax]
%line 1001+1 jombloforth.asm


%line 1002+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYSCALL2]
 name_SYSCALL2:
 dq name_SYSCALL3
 db 8 + 0
 db "SYSCALL2"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYSCALL2]
 $SYSCALL2:
 dq code_SYSCALL2


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYSCALL2]
 code_SYSCALL2:
%line 1003+1 jombloforth.asm
 mov rcx, rsi
 pop rax
 pop rdi
 pop rsi
 push rcx
 syscall
 pop rsi
 push rax
 lodsq
%line 1011+0 jombloforth.asm
 jmp [rax]
%line 1012+1 jombloforth.asm


%line 1013+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYSCALL1]
 name_SYSCALL1:
 dq name_SYSCALL2
 db 8 + 0
 db "SYSCALL1"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYSCALL1]
 $SYSCALL1:
 dq code_SYSCALL1


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYSCALL1]
 code_SYSCALL1:
%line 1014+1 jombloforth.asm
 pop rax
 pop rdi
 syscall
 push rax
 lodsq
%line 1018+0 jombloforth.asm
 jmp [rax]
%line 1019+1 jombloforth.asm


%line 1020+0 jombloforth.asm

[section .rodata]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global name_SYSCALL0]
 name_SYSCALL0:
 dq name_SYSCALL1
 db 8 + 0
 db "SYSCALL0"




[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) db 0
[global $SYSCALL0]
 $SYSCALL0:
 dq code_SYSCALL0


[section .text]
[sectalign 8]
times (((8) - (($-$$) % (8))) % (8)) nop
[global code_SYSCALL0]
 code_SYSCALL0:
%line 1021+1 jombloforth.asm
 pop rax
 syscall
 push rax
 lodsq
%line 1024+0 jombloforth.asm
 jmp [rax]
%line 1025+1 jombloforth.asm





[section .text]
set_up_data_segment:
 xor rdi, rdi
 mov rax, 12
 syscall
 mov [var_HERE], rax
 add rax, 65536
 mov rdi, rax
 mov rax, 12
 syscall
 ret



[section .bss]
[sectalign 4096]
%line 1045+0 jombloforth.asm
times (((4096) - (($-$$) % (4096))) % (4096)) nop
%line 1046+1 jombloforth.asm
return_stack:
 resb 8192
return_stack_top:

[sectalign 4096]
%line 1050+0 jombloforth.asm
times (((4096) - (($-$$) % (4096))) % (4096)) nop
%line 1051+1 jombloforth.asm
buffer:
 resb 4096
